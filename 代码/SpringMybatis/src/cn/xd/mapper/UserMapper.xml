<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离
	注意：使用mapper代理方法开发，namespace有特殊重要的作用,namespace等于mapper接口地址
 -->	
<mapper namespace="cn.xd.mapper.UserMapper">                        
	<!-- 通过select执行数据库查询
		id：标识映射文件中的sql
		prameterType：指定输入参数的类型，这指定int型
		#{}表示一个占位符
		#{id}其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数可以任意，
		可以是value或其他名称。
		resultTyte：指定sql输出结果的映射的Java对象类型，select指定resultTyte表示单条记录映射成Java对象。
	 -->
	 <select id="findUserById" parameterType="String" resultType="User">
	 	select * from user where id=#{id}
	 </select>
	 
	 
	 <!-- 根据用户名称模糊查询用户信息，可能返回多条
	resultType：指定就是dantiaojild所映射的java对象类型
	${}：表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
	使用${}拼接sql，引起sql注入
	${value}：接受输入参数的内容，如果传入类型是简单类型，${}中只能使用value -->
	<select id="findUserByName" parameterType="java.lang.String" 
			resultType="User">
		SELECT * FROM USER WHERE name LIKE '%${value}%'
	</select>
	
	
	<!-- 添加用户
		parameterType：指定输入参数类型是pojo(包括用户信息)
		#{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值 -->
	<insert id="insertUser" parameterType="User">
	
		<!-- 将插入数据的主键返回，返回到user对象中
			SELECT LAST_INSERT_ID():得到刚insert进去记录的主键值，只适用与自增主键
			keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
			order：SELECT LAST_insert_ID()执行顺序，相对于insert语句来说它的执行顺序
			resultType：指定SELECT LAST_INSERT_ID()的结果类型
		 -->
		<!-- <selectKey keyProperty="id" order="AFTER" resultType="java.lang.String">
			SELECT LAST_INSERT_ID()
		<lectKey> -->
		
		<!-- 
		使用MySQL的uuid生成主键
		执行过程：
		首先通过uuid()得到主键，将主键设置到user对象的id属性中
		其次在insert执行时，从user对象中取出id属性值
		 -->
		<!-- <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
				SELECT uuid()
		</selectKey> -->
		insert into user(id,name,password) value(#{id},#{name},#{password})
	</insert>
     <!-- 删除用户
     	根据id删除用户，需要输入id的值
     	 -->
     	<delete id="deleteUser" parameterType="String">
     		delete from user where id=#{id}
     	</delete>
     	
     	<!-- 根据id更新用户
     	分析：
     	需要传入用户的id
     	需要传入用户的更新信息
     	parameterType指定user对象，包括id和更新信息，注意：id必须存在
     	#{id}：从传入user对象中获取id属性值
     	 -->
     	 <update id="updateUser" parameterType="User">
     	 	update user set name=#{name},address=#{address} where id=#{id}
     	 </update> 
</mapper>